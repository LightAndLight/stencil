{-# language GeneralizedNewtypeDeriving #-}
{-# language OverloadedStrings #-}
{-# language OverloadedLists #-}
{-# language QuasiQuotes #-}

import Stencil
import Stencil.CmdLine

import Control.Monad
import Data.Functor
import Data.Monoid
import Options.Applicative
import System.Environment

cabalFile =
  [template|
-- Initial ${package-name}.cabal generated by cabal init.  For further documentation, 
-- see http://haskell.org/cabal/users-guide/

name:                ${package-name}
version:             ${version}
-- synopsis:
-- description:
license:             ${license}
license-file:        LICENSE
author:              ${author-name}
maintainer:          ${author-email}
-- copyright:
-- category:
build-type:          Simple
extra-source-files:  ChangeLog.md
cabal-version:       >=1.10

library
  -- exposed-modules:
  -- other-modules:
  -- other-extensions:
  build-depends:       base >=4.9 && <4.10
  -- hs-source-dirs:
  default-language:    Haskell2010
|]

shellNix =
  [template|
{ nixpkgs ? import <nixpkgs> {}, compiler ? "ghc821" }:

let

  inherit (nixpkgs) pkgs;

  haskellPackages = if compiler == "default"
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.\${compiler};

  drv = import ./default.nix { inherit nixpkgs compiler; };

in

  if pkgs.lib.inNixShell then drv.env else drv
|]

defaultNix =
  [template|
{ nixpkgs ? import <nixpkgs> {}, compiler ? "ghc821" }:

let

  inherit (nixpkgs) pkgs;

  f = import ./${package-name}.nix;

  haskellPackages = if compiler == "default"
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.\${compiler};

  drv = haskellPackages.callPackage f {};

in

  drv
|]

steps =
  prompt "package-name" "Package Name" Nothing Nothing *>
  prompt "version" "Version" Nothing (Just "0.1.0.0") *>
  prompt
    "license"
    "License"
    (Just
      [ "GPL-2"
      , "GPL-3"
      , "LGPL-2.1" , "LGPL-3"
      , "BSD2"
      , "BSD3"
      , "MIT"
      , "ISC"
      , "MPL-2.0"
      , "Apache-2.0"
      , "PublicDomain"
      , "AllRightsReserved"
      ])
    (Just "BSD3") *>
  prompt "author-name" "Author Name" Nothing Nothing *>
  prompt "author-email" "Author Email" Nothing Nothing *>
  fillTemplate [template|${package-name}.cabal|] cabalFile *>
  fillTemplate [template|default.nix|] defaultNix *>
  fillTemplate [template|shell.nix|] shellNix

initInfo :: ParserInfo ()
initInfo =
  info
    ((strArgument
     (metavar "STENCIL" <>
      help "The stencil to run") *>
     flag False True (short 'n' <> help "Run in non-interactive mode") $> ()) <**>
     helper)
    fullDesc

main = do
  args <- getArgs
  case args of
    "init" : "haskell/nix" : "-n" : rest ->
      void . handleParseResult $ execParserPure defaultPrefs (nonInteractive steps) rest
    "init" : "haskell/nix" : _ -> void $ runSteps steps
    "init" : arg : _ | head arg /= '-' -> error "stencil error: unknown template name"
    "init" : rest ->
      void . handleParseResult $ execParserPure defaultPrefs initInfo rest
    _ ->
      void . handleParseResult $
      execParserPure defaultPrefs
      (info
        (subparser
          (command "init" initInfo)
          <**>
          helper)
        fullDesc)
      args
